[root@localhost task]# terraform apply
data.aws_ami.latest-amazon-linux-image: Reading...
data.aws_ami.latest-amazon-linux-image: Read complete after 0s [id=ami-013efd7d9f40467af]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_db_instance.myapp-rds will be created
  + resource "aws_db_instance" "myapp-rds" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = "eu-central-1b"
      + backup_retention_period               = (known after apply)
      + backup_target                         = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "prod"
      + db_subnet_group_name                  = "myapp-subnet-group"
      + dedicated_log_volume                  = false
      + delete_automated_backups              = true
      + domain_fqdn                           = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_lifecycle_support              = (known after apply)
      + engine_version                        = "8.0"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "prod-rds"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + listener_endpoint                     = (known after apply)
      + maintenance_window                    = (known after apply)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "default.mysql8.0"
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                   = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_throughput                    = (known after apply)
      + storage_type                          = (known after apply)
      + tags_all                              = (known after apply)
      + timezone                              = (known after apply)
      + username                              = "foo"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.myapp_subnet_group will be created
  + resource "aws_db_subnet_group" "myapp_subnet_group" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "myapp-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = (known after apply)
      + supported_network_types = (known after apply)
      + tags                    = {
          + "Name" = "prod-subnet-group"
        }
      + tags_all                = {
          + "Name" = "prod-subnet-group"
        }
      + vpc_id                  = (known after apply)
    }

  # aws_instance.myapp-server will be created
  + resource "aws_instance" "myapp-server" {
      + ami                                  = "ami-013efd7d9f40467af"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = "eu-central-1b"
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "server-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "prod-server"
        }
      + tags_all                             = {
          + "Name" = "prod-server"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

  # aws_internet_gateway.myapp_igw will be created
  + resource "aws_internet_gateway" "myapp_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "prod-igw"
        }
      + tags_all = {
          + "Name" = "prod-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.ssh-key will be created
  + resource "aws_key_pair" "ssh-key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "server-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtWF74acljuU2TtaH0egrSfyX7Tp6L9lDPVPx/2aHCH5vD1T5WCSciqs8cM6gaowch4QIIWueivdenyLYFnKc/xqtUTF0/gEi4qCcMjvUQG0XNipDjZyvVOoji2ygY+1febdJ7YPUzXj3R9pWYgVYpzHCUMlhTgej3FY7YYZ86nRjpToKLGqaaA53StF3Z+LhtnGcqXArUIUa34UvQ6PlnSd7JBcCaZkw+0ieHXDDm0WxJRJWoBj00PUBRkJfOsmNb8e9CmFjLFn5fiio1tUCgIIk+6hyAmDjtqH5KGfpvpqpLgq182W9f+LpseBc55+QZPlFcW3jSSZEfXe3lowi96qHMDTYEXbE/heRx8wdkFYl+wkNuV/Xe62HJVULKpXl1Sdvy2Rj7k4OkO+8jqIGrzR3Y4dgD4W/cylanygWKeKBv7e732qE7o0wnu7rQqGRhaYiafTLLvh7VPDf7uLJSKS43+pS2v7yJxVgsSt8vHyG3wU9Y9s1C376BbjlRE68= root@localhost.localdomain"
      + tags_all        = (known after apply)
    }

  # aws_route_table.myapp-route-table will be created
  + resource "aws_route_table" "myapp-route-table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "prod-rtb"
        }
      + tags_all         = {
          + "Name" = "prod-rtb"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.a-rtb-subnet will be created
  + resource "aws_route_table_association" "a-rtb-subnet" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.a_rtb_subnet_2 will be created
  + resource "aws_route_table_association" "a_rtb_subnet_2" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.myapp-sg will be created
  + resource "aws_security_group" "myapp-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 3000
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3000
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "197.46.19.128/32",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "prod-app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "prod-app-sg"
        }
      + tags_all               = {
          + "Name" = "prod-app-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.rds-sg will be created
  + resource "aws_security_group" "rds-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "197.46.19.128/32",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = []
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3306
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "prod-rds-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "prod-rds-sg"
        }
      + tags_all               = {
          + "Name" = "prod-rds-sg"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.myapp-subnet-1 will be created
  + resource "aws_subnet" "myapp-subnet-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-central-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.10.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "prod-subnet-1"
        }
      + tags_all                                       = {
          + "Name" = "prod-subnet-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.myapp_subnet_2 will be created
  + resource "aws_subnet" "myapp_subnet_2" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-central-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.20.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "prod-subnet-2"
        }
      + tags_all                                       = {
          + "Name" = "prod-subnet-2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.myapp-vpc will be created
  + resource "aws_vpc" "myapp-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "prod-vpc"
        }
      + tags_all                             = {
          + "Name" = "prod-vpc"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_ami_id = "ami-013efd7d9f40467af"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_key_pair.ssh-key: Creating...
aws_vpc.myapp-vpc: Creating...
aws_key_pair.ssh-key: Creation complete after 0s [id=server-key]
aws_vpc.myapp-vpc: Creation complete after 2s [id=vpc-078d728a114ba903a]
aws_internet_gateway.myapp_igw: Creating...
aws_subnet.myapp-subnet-1: Creating...
aws_subnet.myapp_subnet_2: Creating...
aws_security_group.myapp-sg: Creating...
aws_internet_gateway.myapp_igw: Creation complete after 1s [id=igw-0dd215ffc05f37373]
aws_route_table.myapp-route-table: Creating...
aws_subnet.myapp-subnet-1: Creation complete after 1s [id=subnet-05d44495adaa79a9d]
aws_subnet.myapp_subnet_2: Creation complete after 1s [id=subnet-082f9957a72e132f8]
aws_db_subnet_group.myapp_subnet_group: Creating...
aws_route_table.myapp-route-table: Creation complete after 1s [id=rtb-05eeb67d841bab17f]
aws_route_table_association.a-rtb-subnet: Creating...
aws_route_table_association.a_rtb_subnet_2: Creating...
aws_db_subnet_group.myapp_subnet_group: Creation complete after 2s [id=myapp-subnet-group]
aws_route_table_association.a-rtb-subnet: Creation complete after 1s [id=rtbassoc-0d4c50b0b3a2f0d44]
aws_route_table_association.a_rtb_subnet_2: Creation complete after 1s [id=rtbassoc-02489e43bf04cb31a]
aws_security_group.myapp-sg: Creation complete after 3s [id=sg-049744d10c782bfd8]
aws_security_group.rds-sg: Creating...
aws_instance.myapp-server: Creating...
aws_security_group.rds-sg: Creation complete after 4s [id=sg-032b7356eac4efe43]
aws_db_instance.myapp-rds: Creating...
aws_instance.myapp-server: Still creating... [10s elapsed]
aws_db_instance.myapp-rds: Still creating... [10s elapsed]
aws_instance.myapp-server: Still creating... [20s elapsed]
aws_db_instance.myapp-rds: Still creating... [20s elapsed]
aws_instance.myapp-server: Still creating... [30s elapsed]
aws_db_instance.myapp-rds: Still creating... [30s elapsed]
aws_instance.myapp-server: Provisioning with 'file'...
aws_instance.myapp-server: Provisioning with 'remote-exec'...
aws_db_instance.myapp-rds: Still creating... [40s elapsed]
aws_db_instance.myapp-rds: Still creating... [50s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m0s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m10s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m20s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m30s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m40s elapsed]
aws_db_instance.myapp-rds: Still creating... [1m50s elapsed]
